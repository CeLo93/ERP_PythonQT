# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'dadosCliente.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

# IMPORT icons
import icon_cancelar
import icon_cadastrar

from PyQt5 import QtCore, QtGui, QtWidgets


from PyQt5.QtWidgets import QApplication, QMainWindow, QPushButton

import sys
from PyQt5.QtWidgets import QApplication, QWidget, QPushButton, QMessageBox
from PyQt5.QtGui import QIcon
from PyQt5.QtCore import pyqtSlot

from alertaDados import Ui_form_alertaDados

import alertaDados
# IMPORTS DO SISTEMA
import mysql.connector
import pandas as pd

# ARQUIVO VARS DE CONTROLE
import variaveisControle

# VARIAVEIS CONEXÃO COM BD
host = variaveisControle.host
user = variaveisControle.user
password = variaveisControle.password
database = variaveisControle.database


class Ui_formdadosCliente(object):
    def setupUi(self, formdadosCliente):
        formdadosCliente.setObjectName("formdadosCliente")
        formdadosCliente.resize(348, 224)
        self.lb_nome = QtWidgets.QLabel(formdadosCliente)
        self.lb_nome.setGeometry(QtCore.QRect(10, 20, 41, 20))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.lb_nome.setFont(font)
        self.lb_nome.setObjectName("lb_nome")
        self.txt_nome = QtWidgets.QLineEdit(formdadosCliente)
        self.txt_nome.setGeometry(QtCore.QRect(70, 20, 271, 20))
        self.txt_nome.setObjectName("txt_nome")
        self.txt_telefone = QtWidgets.QLineEdit(formdadosCliente)
        self.txt_telefone.setGeometry(QtCore.QRect(70, 50, 271, 20))
        self.txt_telefone.setObjectName("txt_telefone")
        self.lb_telefone = QtWidgets.QLabel(formdadosCliente)
        self.lb_telefone.setGeometry(QtCore.QRect(10, 50, 51, 20))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.lb_telefone.setFont(font)
        self.lb_telefone.setObjectName("lb_telefone")
        self.txt_cidade = QtWidgets.QLineEdit(formdadosCliente)
        self.txt_cidade.setGeometry(QtCore.QRect(70, 80, 271, 20))
        self.txt_cidade.setObjectName("txt_cidade")
        self.lb_cidade = QtWidgets.QLabel(formdadosCliente)
        self.lb_cidade.setGeometry(QtCore.QRect(10, 80, 41, 20))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.lb_cidade.setFont(font)
        self.lb_cidade.setObjectName("lb_cidade")
        self.bt_cancelar = QtWidgets.QPushButton(formdadosCliente)
        self.bt_cancelar.setGeometry(QtCore.QRect(90, 110, 71, 61))
        self.bt_cancelar.setStyleSheet(
            "image:url(:/icon_cancelar/Icons/cancelar.png)")
        self.bt_cancelar.setText("")
        self.bt_cancelar.setObjectName("bt_cancelar")
        self.bt_cadastrar = QtWidgets.QPushButton(formdadosCliente)
        self.bt_cadastrar.setGeometry(QtCore.QRect(200, 110, 71, 61))
        self.bt_cadastrar.setStyleSheet(
            "image:url(:/icon_cadastrar/Icons/cadastrar.png)")
        self.bt_cadastrar.setText("")
        self.bt_cadastrar.setObjectName("bt_cadastrar")

        # ----------------------------------------------------------------
        self.retranslateUi(formdadosCliente)
        QtCore.QMetaObject.connectSlotsByName(formdadosCliente)

    def retranslateUi(self, formdadosCliente):
        _translate = QtCore.QCoreApplication.translate
        formdadosCliente.setWindowTitle(_translate("formdadosCliente", "Form"))
        self.lb_nome.setText(_translate("formdadosCliente", "Nome"))
        self.lb_telefone.setText(_translate("formdadosCliente", "Telefone"))
        self.lb_cidade.setText(_translate("formdadosCliente", "Cidade"))
        self.bt_cancelar.setToolTip(_translate(
            "formdadosCliente", "<html><head/><body><p><br/></p></body></html>"))
        self.bt_cadastrar.setToolTip(_translate(
            "formdadosCliente", "<html><head/><body><p><br/></p></body></html>"))
# ----------------------------------------------------------------

        # BOTÕES SYSTEM
        self.bt_cancelar.clicked.connect(
            lambda: self.sairTela(formdadosCliente))
        if variaveisControle.tipoTelaDadosCliente == 'incluir':
            self.bt_cadastrar.clicked.connect(self.cadastrarCliente)
        if variaveisControle.tipoTelaDadosCliente == 'alterar':
            self.bt_cadastrar.clicked.connect(self.alterarCliente)

        # CONDIÇÕES DAS OPÇÕES DE TELA----------v
        # Tipo de tela
        # Se for incluir, eu posso editar os campos da janelinha de cadastro
        if variaveisControle.tipoTelaDadosCliente == 'incluir':
            self.txt_nome.setEnabled(True)
            self.txt_telefone.setEnabled(True)
            self.txt_cidade.setEnabled(True)
            self.bt_cadastrar.setEnabled(True)

            # Se for consultar, eu não posso editaros campos da janelinha de cadastro
        elif variaveisControle.tipoTelaDadosCliente == 'consultar':
            self.txt_nome.setEnabled(False)
            self.txt_telefone.setEnabled(False)
            self.txt_cidade.setEnabled(False)
            self.bt_cadastrar.setEnabled(False)
            # Conexão com banco de dados
            mydb = mysql.connector.connect(
                host=host,
                user=user,
                password=password,
                database=database
            )
            mycursor = mydb.cursor()
            consultaSQL = "SELECT * FROM cliente WHERE IdCliente = '" + \
                variaveisControle.idConsulta + "'"
            mycursor.execute(consultaSQL)
            myresult = mycursor.fetchall()
            mycursor.close()  # fechando consulta no bd
            # Converte o resultado do banco de dados para DataFrame
            df = pd.DataFrame(myresult, columns=[
                'ID', 'Nome', 'Telefone', 'Cidade'])
            nomeCliente = df['Nome'][0]
            telefoneCliente = df['Telefone'][0]
            cidadeCliente = df['Cidade'][0]
            # Transfere as variáveis na tela do sistema
            self.txt_nome.setText(nomeCliente)
            self.txt_telefone.setText(telefoneCliente)
            self.txt_cidade.setText(cidadeCliente)

            # Se for alterar, eu  posso editar os campos da janelinha de cadastro
        elif variaveisControle.tipoTelaDadosCliente == 'alterar':
            self.txt_nome.setEnabled(True)
            self.txt_telefone.setEnabled(True)
            self.txt_cidade.setEnabled(True)
            self.bt_cadastrar.setEnabled(True)
            # Conexão com banco de dados
            mydb = mysql.connector.connect(
                host=host,
                user=user,
                password=password,
                database=database
            )
            mycursor = mydb.cursor()
            consultaSQL = "SELECT * FROM cliente WHERE IdCliente = '" + \
                variaveisControle.idConsulta + "'"
            mycursor.execute(consultaSQL)
            myresult = mycursor.fetchall()
            mycursor.close()  # fechando consulta no bd
            # Converte o resultado do banco de dados para DataFrame
            df = pd.DataFrame(myresult, columns=[
                'ID', 'Nome', 'Telefone', 'Cidade'])
            nomeCliente = df['Nome'][0]
            telefoneCliente = df['Telefone'][0]
            cidadeCliente = df['Cidade'][0]
            # Transfere as variáveis na tela do sistema
            self.txt_nome.setText(nomeCliente)
            self.txt_telefone.setText(telefoneCliente)
            self.txt_cidade.setText(cidadeCliente)

    # FUNÇÕES SISTEMA----------------------------------------------------------------v

    # --- SAIR dadosCliente

    def sairTela(self, formdadosCliente):
        formdadosCliente.close()

    # -- CADASTRAR CLIENTE
    def cadastrarCliente(self):
        nomeCliente = self.txt_nome.text()
        telefoneCliente = self.txt_telefone.text()
        cidadeCliente = self.txt_cidade.text()

        mydb = mysql.connector.connect(
            host=host,
            user=user,
            password=password,
            database=database
        )
        if (nomeCliente != "") and (cidadeCliente != "") and (telefoneCliente != ""):

            mycursor = mydb.cursor()
            sql = "INSERT INTO cliente (Nome, Telefone, Cidade) values (%s, %s, %s)"
            val = (nomeCliente, telefoneCliente, cidadeCliente)
            mycursor.execute(sql, val)

            mydb.commit()

            print(mycursor.rowcount, 'record(s) inserted')
            mycursor.close()
            self.txt_nome.setText("")
            self.txt_telefone.setText("")
            self.txt_cidade.setText("")

        else:
            self.form_sairSystem = QtWidgets.QWidget()
            self.ui = Ui_form_alertaDados()
            self.ui.setupUi(self.form_sairSystem)
            self.form_sairSystem.show()

    # -- ALTERAR CLIENTE
    def alterarCliente(self):
        nomeCliente = self.txt_nome.text()
        telefoneCliente = self.txt_telefone.text()
        cidadeCliente = self.txt_cidade.text()

        mydb = mysql.connector.connect(
            host=host,
            user=user,
            password=password,
            database=database
        )
        if (nomeCliente != "") and (cidadeCliente != "") and (telefoneCliente != ""):

            mycursor = mydb.cursor()
            sql = "UPDATE cliente SET Nome = '" + nomeCliente + "', Telefone = '" + telefoneCliente + \
                "', Cidade = '" + cidadeCliente + "' WHERE IdCliente = '" + \
                variaveisControle.idConsulta + "'"
            mycursor.execute(sql)
            mydb.commit()
            print(mycursor.rowcount, 'record(s) inserted')
            mycursor.close()


# ----------------------------------------------------------------


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    formdadosCliente = QtWidgets.QWidget()
    ui = Ui_formdadosCliente()
    ui.setupUi(formdadosCliente)
    formdadosCliente.show()
    sys.exit(app.exec_())
